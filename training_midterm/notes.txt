exemplu lab 4
--------------


#include <ostream>
#include <iostream>

using namespace std;

class Array {
public:
	Array(unsigned int capacity = 10) : m_data {new int[capacity]}, m_length{0}, m_capacity{capacity} {}

	unsigned int length() const { return m_length; }
	unsigned int capacity() const { return m_capacity; }
	
	bool append (int elem) {
		if (m_length < m_capacity) {
			m_data[m_length ++] = elem;
			return true;
		}
		return false;
	}

	int &at (unsigned int i) {
		return m_data[i];
	}

	friend ostream& operator<<(ostream& os, const Array& a) {
		for (unsigned int i {0}; i < a.m_length; i ++) {
			os << a.m_data[i] << " ";
		}
		os << endl;
		return os;
	}

private:
	int * m_data;
	unsigned int m_length;
	unsigned int m_capacity;
};




destructor
~Array() {
	if (m_data) {
		delete[] m_data;
		m_data = nullptr;
	}
}

copy constructor 
Array (const Array& other) {
	m_capacity = other.m_capacity;
	m_length = other.m_length;
	m_data = new int[m_capacity]() --> () initializes all values with 0
	for (int i = 0; i < m_length; i ++) {
		m_data[i] = other.m_data[i];
	}
}

assignment operator

Array& operator=(const Array& other) {
	if (this != &other) {
		if (m_data)
			delete[] m_data;
		//deep copy
		m_capacity = other.m_capacity;
		m_length = other.m_length;
		m_data = new int[m_capacity]();
		for (int i{0}; i < m_length; i ++) {
			m_data[i] = other.m_data[i];
		}
	}
	return *this;
}



-------------------------------------------------------------------------

COUNTER CLASS - used to explain pre/post-incremenent - ++a or a++ -

-------------------------------------------------------------------------


class Counter {
	private: 
		int value;
	
	public:
		Counter(int v = 0) : value(v) {}
		//pre-increment(++obj)
		Counter& operator++() {
			++value; // Increment value first
			return *this;
		}
		
		//post-increment(obj++)
		Counter operator++(int) {
			Counter temp = *this; // store current value
			value++; // increment
			return temp; // return old state
		}
		
		friend ostream& operator<<(ostream& os, const Counter& c) {
			os << "Value: " << c.value << '\n';
			return os;
		}
};


#include <iostream>
#include <ostream>
#include <stdexcept>

using namespace std;

class Deque {
    private: 
        unsigned int m_numberOfElements;
        unsigned int m_capacity;
        int* m_elements;
    
    public:
        // Constructor
        Deque(unsigned int capacity = 10) 
            : m_numberOfElements{0}, m_capacity{capacity}, m_elements{new int[capacity]} {}

        // Destructor
        ~Deque() {
            delete[] m_elements;
        }

        // Copy Constructor (Fixed)
        Deque(const Deque& other) 
            : m_numberOfElements{other.m_numberOfElements}, m_capacity{other.m_capacity}, m_elements{new int[other.m_capacity]} {
            for (unsigned int i = 0; i < m_numberOfElements; i++)
                m_elements[i] = other.m_elements[i];
        }

        // Copy Assignment Operator (Fixed)
        Deque& operator=(const Deque& other) {
            if (this != &other) {
                delete[] m_elements; // Avoid memory leak
                m_capacity = other.m_capacity;
                m_numberOfElements = other.m_numberOfElements;
                m_elements = new int[m_capacity];
                for (unsigned int i = 0; i < m_numberOfElements; i++)
                    m_elements[i] = other.m_elements[i];
            }
            return *this;
        }

        // Getters
        unsigned int capacity() const { return m_capacity; }
        unsigned int length() const { return m_numberOfElements; }

        // Resize method
        void resize() {
            if (m_numberOfElements == m_capacity) {
                m_capacity *= 2;
            } else if (m_numberOfElements <= m_capacity / 4 && m_capacity > 10) {
                m_capacity /= 2;
            } else {
                return;
            }

            int* temp = new int[m_capacity];
            for (unsigned int i = 0; i < m_numberOfElements; i++) {
                temp[i] = m_elements[i];
            }
            delete[] m_elements;
            m_elements = temp;
        }

        // Push front
        void push_front(int value) {
            if (m_numberOfElements == m_capacity) {
                resize();
            }

            for (unsigned int i = m_numberOfElements; i > 0; i--) {
                m_elements[i] = m_elements[i - 1];
            }

            m_elements[0] = value;
            m_numberOfElements++;
        }

        // Pop front
        int pop_front() {
            if (m_numberOfElements == 0) {
                throw invalid_argument("The deque is empty!");
            }

            int firstElement = m_elements[0];
            for (unsigned int i = 0; i < m_numberOfElements - 1; i++) {
                m_elements[i] = m_elements[i + 1];
            }

            m_numberOfElements--;
            resize(); // Reduce size if necessary
            return firstElement;
        }

        // Push back
        void push_back(int value) {
            if (m_numberOfElements == m_capacity) {
                resize();
            }

            m_elements[m_numberOfElements++] = value;
        }

        // Pop back
        int pop_back() {
            if (m_numberOfElements == 0) {
                throw invalid_argument("The deque is empty!");
            }

            int lastElement = m_elements[--m_numberOfElements];
            resize(); // Reduce size if necessary
            return lastElement;
        }

        // Access first element
        int top() const {
            if (m_numberOfElements == 0) {
                throw invalid_argument("The deque is empty!");
            }
            return m_elements[0];
        }

        // Access last element
        int back() const {
            if (m_numberOfElements == 0) {
                throw invalid_argument("The deque is empty!");
            }
            return m_elements[m_numberOfElements - 1];
        }

        // Overloaded stream operators
        friend ostream &operator<<(ostream &os, const Deque& d) {
            os << "Capacity: " << d.m_capacity << "\nNumber of elements: " << d.m_numberOfElements << "\n";

            for (unsigned int i = 0; i < d.m_numberOfElements; i++) {
                os << d.m_elements[i] << " ";
            }
            os << "\n";
            return os;
        }

        friend istream &operator>>(istream &is, Deque &d) {
            unsigned int nrElements;
            is >> nrElements;
            d = Deque(nrElements);
            for (unsigned int i = 0; i < nrElements; i++) {
                int value;
                is >> value;
                d.push_back(value);
            }
            return is;
        }
};
